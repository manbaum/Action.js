// Generated by CoffeeScript 1.9.3
(function() {
  var Action, ignore, makeQueryStrR,
    slice = [].slice;

  ignore = function() {};

  Action = (function() {
    function Action(_go1) {
      this._go = _go1;
    }

    Action.prototype._next = function(cb) {
      var _go;
      _go = this._go;
      return new Action(function(_cb) {
        return _go(function(data) {
          var _data;
          _data = cb(data);
          if (_data instanceof Action) {
            return _data._go(_cb);
          } else {
            return _cb(_data);
          }
        });
      });
    };

    Action.prototype.next = function(cb) {
      var _go;
      _go = this._go;
      return new Action(function(_cb) {
        return _go(function(data) {
          var _data;
          if (data instanceof Error) {
            return _cb(data);
          } else {
            _data = cb(data);
            if (_data instanceof Action) {
              return _data._go(_cb);
            } else {
              return _cb(_data);
            }
          }
        });
      });
    };

    Action.prototype.guard = function(cb) {
      var _go;
      _go = this._go;
      return new Action(function(_cb) {
        return _go(function(data) {
          var _data;
          if (data instanceof Error) {
            _data = cb(data);
            if (_data instanceof Action) {
              return _data._go(_cb);
            } else {
              return _cb(_data);
            }
          } else {
            return _cb(data);
          }
        });
      });
    };

    Action.prototype.go = function(cb) {
      return this._go(function(data) {
        if (data instanceof Error) {
          throw data;
        } else if (cb != null) {
          return cb(data);
        }
      });
    };

    return Action;

  })();

  Action.wrap = function(data) {
    return new Action(function(cb) {
      return cb(data);
    });
  };

  Action.freeze = function(action) {
    var callbacks, data, pending;
    pending = true;
    data = void 0;
    callbacks = [];
    action._go(function(_data) {
      var cb, j, len;
      if (pending) {
        data = _data;
        pending = false;
        for (j = 0, len = callbacks.length; j < len; j++) {
          cb = callbacks[j];
          cb(_data);
        }
        return callbacks = void 0;
      }
    });
    return new Action(function(cb) {
      if (pending) {
        return callbacks.push(cb);
      } else {
        return cb(data);
      }
    });
  };

  Action.safe = function(err, fn) {
    return function(data) {
      var e;
      try {
        return fn(data);
      } catch (_error) {
        e = _error;
        return err;
      }
    };
  };

  Action.safeRaw = function(fn) {
    return function(data) {
      var e;
      try {
        return fn(data);
      } catch (_error) {
        e = _error;
        return e;
      }
    };
  };

  Action.chain = function(monadicActions) {
    return function(init) {
      var a, j, len, monadicAction, ref;
      if (monadicActions.length > 0) {
        a = monadicActions[0](init);
        ref = monadicActions.slice(1);
        for (j = 0, len = ref.length; j < len; j++) {
          monadicAction = ref[j];
          a = a.next(monadicAction);
        }
        return a;
      } else {
        return Action.wrap(void 0);
      }
    };
  };

  Action.repeat = function(times, action, stopAtError) {
    var a;
    if (stopAtError == null) {
      stopAtError = false;
    }
    return a = action._next(function(data) {
      if (((data instanceof Error) && stopAtError) || times-- === 0) {
        return data;
      } else {
        return a;
      }
    });
  };

  Action.delay = function(delay, action) {
    return new Action(function(cb) {
      return setTimeout(cb, delay);
    })._next(function() {
      return action;
    });
  };

  Action.retry = function(times, action) {
    var a;
    return a = action.guard(function(e) {
      if (times-- !== 0) {
        return a;
      } else {
        return new Error('RETRY_ERROR: Retry limit reached');
      }
    });
  };

  Action.gapRetry = function(times, delay, action) {
    var a;
    return a = (Action.delay(delay, action)).guard(function(e) {
      if (times-- !== 0) {
        return a;
      } else {
        return new Error('RETRY_ERROR: Retry limit reached');
      }
    });
  };

  Action.parallel = function(actions, stopAtError) {
    var countDown, results;
    if (stopAtError == null) {
      stopAtError = false;
    }
    results = [];
    countDown = actions.length;
    return new Action(function(cb) {
      var action, i, j, len, results1;
      if (countDown > 0) {
        results1 = [];
        for (i = j = 0, len = actions.length; j < len; i = ++j) {
          action = actions[i];
          results1.push((function(index) {
            return action._go(function(data) {
              countDown--;
              if ((data instanceof Error) && stopAtError) {
                cb(data);
                return cb = ignore;
              } else {
                results[index] = data;
                if (countDown === 0) {
                  return cb(results);
                }
              }
            });
          })(i));
        }
        return results1;
      } else {
        return cb(result);
      }
    });
  };

  Action.race = function(actions, stopAtError) {
    var countDown;
    if (stopAtError == null) {
      stopAtError = false;
    }
    countDown = actions.length;
    return new Action(function(cb) {
      var action, j, len, results1;
      if (countDown === 0) {
        return cb(new Error('RACE_ERROR: All actions failed'));
      } else {
        results1 = [];
        for (j = 0, len = actions.length; j < len; j++) {
          action = actions[j];
          results1.push(action._go(function(data) {
            countDown--;
            if ((!(data instanceof Error)) || stopAtError) {
              cb(data);
              cb = ignore;
              return countDown = -1;
            } else if (countDown === 0) {
              return cb(new Error('RACE_ERROR: All actions failed'));
            }
          }));
        }
        return results1;
      }
    });
  };

  Action.sequence = function(actions, stopAtError) {
    var a, action, countDown, fn1, j, len, ref, results;
    if (stopAtError == null) {
      stopAtError = false;
    }
    results = [];
    countDown = actions.length;
    if (countDown > 0) {
      a = actions[0];
      ref = actions.slice(1);
      fn1 = function(action) {
        return a = a._next(function(data) {
          if ((data instanceof Error) && stopAtError) {
            return data;
          } else {
            results.push(data);
            return action;
          }
        });
      };
      for (j = 0, len = ref.length; j < len; j++) {
        action = ref[j];
        fn1(action);
      }
      return a._next(function(data) {
        if ((data instanceof Error) && stopAtError) {
          return data;
        } else {
          results.push(data);
          return results;
        }
      });
    } else {
      return Action.wrap(results);
    }
  };

  Action.makeNodeAction = function(nodeAPI) {
    return function() {
      var args, self;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      self = this;
      return new Action(function(cb) {
        args.push(function(err, data) {
          return cb(err ? err : data);
        });
        return nodeAPI.apply(self, args);
      });
    };
  };

  makeQueryStrR = function(prefix, data) {
    var k, key, result, v;
    result = [];
    for (k in data) {
      v = data[k];
      key = prefix ? prefix + '[' + k + ']' : k;
      if ((typeof v) === 'object') {
        result.push(makeQueryStrR(key, v));
      } else if (v != null) {
        result.push(encodeURIComponent(key) + "=" + encodeURIComponent(v));
      }
    }
    return result.join('&');
  };

  Action.param = function(data) {
    return makeQueryStrR('', data);
  };

  Action.jsonp = function(opts) {
    return new Action(function(cb) {
      var callbackName, script;
      callbackName = 'callback_' + (Math.round(Math.random() * 1e16)).toString(36);
      script = document.createElement('script');
      window[callbackName] = function(resp) {
        script.parentNode.removeChild(script);
        cb(resp);
        return window[callbackName] = void 0;
      };
      script.onerror = function() {
        script.parentNode.removeChild(script);
        cb(new Error('AJAX_REQUEST_ERROR: error when making jsonp request'));
        window[callbackName] = void 0;
        return false;
      };
      script.onload = function() {
        return false;
      };
      script.src = opts.url + (opts.url.indexOf('?') === -1 ? '?' : '&') + (opts.callback ? opts.callback : 'callback') + '=' + callbackName;
      document.body.appendChild(script);
      return script;
    });
  };

  Action.ajax = function(opts) {
    return new Action(function(cb) {
      var k, ref, v, xhr;
      xhr = new window.XMLHttpRequest;
      xhr.open(opts.method, opts.url, true, opts.user, opts.password);
      xhr.onload = function() {
        if (xhr.readyState === 4) {
          if (xhr.status >= 200 && xhr.status < 300) {
            return cb(xhr.response);
          } else {
            return cb(new Error('AJAX_REQUEST_ERROR: status' + xhr.status));
          }
        }
      };
      ref = opts.headers;
      for (k in ref) {
        v = ref[k];
        xhr.setRequestHeader(k, v);
      }
      if (opts.timeout) {
        xhr.timeout = opts.timeout;
        xhr.ontimeout = function() {
          return cb(new Error('AJAX_REQUEST_ERROR: timeout'));
        };
      }
      if (opts.responseType) {
        xhr.responseType = opts.responseType;
      }
      if (opts.data != null) {
        xhr.send(opts.data);
      } else {
        xhr.send();
      }
      return xhr;
    });
  };

  if ((typeof module !== "undefined" && module !== null) && (module.exports != null)) {
    module.exports = Action;
  } else if (typeof define === "function" && define.amd) {
    define(function() {
      return Action;
    });
  } else if (typeof window !== "undefined" && window !== null) {
    window.Action = Action;
  }

}).call(this);
