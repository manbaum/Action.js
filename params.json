{"name":"Action.js","tagline":"A sane way to write async code","body":"Action.js, a sane way to write async code\r\n=========================================\r\n\r\nAction.js offer a [faster](https://github.com/winterland1989/Action.js/wiki/Benchmark) and simpler(~200LOC) alternative to [Promise](http://promisesaplus.com), got 5 minutes?\r\n\r\nUnderstand Action.js in 5 minutes\r\n---------------------------------\r\n\r\nSuppose we want to solve the nest callback problem form scratch, there's an async function called `readFile`, and we want to use it to read `data.txt`, we have to supply a `callback` to it:\r\n\r\n    readFile(\"data.txt\", callback)\r\n\r\nInstead we don't give a callback to it right now, we save this read action in a new `Action`:\r\n\r\n```js\r\nvar Action = function Action(action1) {\r\n    this.action = action1;\r\n}\r\n\r\nvar readFileAction = new Action(\r\n    function(cb){\r\n        readFile(\"data.txt\", cb);\r\n    }\r\n);\r\n```\r\nWe have following objects on our heap:\r\n\r\n    +----------------+----------+\r\n    | readFileAction | .action  | \r\n    +----------------+----+-----+\r\n                          |\r\n                          v\r\n                    +----------+---------------+\r\n                    | function | cb            |\r\n                    +----------+---------------+   \r\n                    | readFile(\"data.txt\", cb) |\r\n                    +--------------------------+\r\n\r\nOk, now we must have a way to extract the action from our `readFileAction`, instead of using `readFileAction.action` directly, we write a function to accpet a callback, and pass this callback to the action inside our `readFileAction`:\r\n\r\n```js\r\nAction.prototype._go = function(cb) {\r\n    return this.action(cb);\r\n};\r\nreadFileAction._go(function(data){\r\n    console.log(data);\r\n})\r\n```\r\n\r\nYou should understand what above `_go` does is equivalent to following:\r\n\r\n```js\r\nreadFile(\"data.txt\", function(data){\r\n    console.log(data);\r\n});\r\n```\r\n\r\nJust with one difference, we seperate action creation(wrap `readFile` in `new Action`) and application(use `_go` to supply a callback), in fact we have successfully did a [CPS transformation](https://en.wikipedia.org/wiki/Continuation-passing_style), we will talk about that later.\r\n\r\nNow we want to chain more callbacks in Promise `then` style:\r\n\r\n```js\r\nAction.prototype._next = function(cb) {\r\n    var self = this;\r\n    return new Action(function(_cb) {\r\n        return self.action(function(data) {\r\n            var _data = cb(data);\r\n            return _cb(_data);\r\n        });\r\n    });\r\n};\r\n```\r\n\r\nLet's break down `_next` a little here:\r\n\r\n+ `_next` accept a callback `cb`, and return a new `Action`.\r\n\r\n+ When the new `Action` fired, the original `Action`'s action will be fired first, and send the value to `cb`.\r\n\r\n+ we save the `_data` produced by `cb`, and wait for a future `_cb`.\r\n\r\nWith our `_next`, we can chain multiply callbacks and pass data between them:\r\n\r\n```js\r\nreadFileAction\r\n._next(function(data){\r\n    return data.length;\r\n})\r\n._next(function(data){\r\n    // data here is the length we obtain last step\r\n    console.log(data);\r\n    return length > 0\r\n})\r\n._go(function(data){\r\n    // data here is a Boolean\r\n    if(data){\r\n        ...\r\n    }\r\n})\r\n```\r\n\r\nIf we want to present it with diagram, it should look like this:\r\n\r\n    +----------------+----------+\r\n    | ActionTwo      | .action  | \r\n    +----------------+----+-----+\r\n                          |\r\n                          v\r\n                    +----------+----------------+\r\n                    | function | cb_            |\r\n                    +----------+----------------+  \r\n                    | cb = function(data){      |\r\n                    |   console.log(data);      |\r\n                    |   return length > 0       |\r\n                    | }                         |\r\n               +--- + ActionOne.action(         |\r\n               |    |   function(data){         |\r\n               |    |     cb_(cb(data))         |\r\n               |    |   });                     | \r\n               |    +---------------------------+\r\n               |                            \r\n               v       \r\n    +----------------+----------+            \r\n    | ActionOne      | .action  | \r\n    +----------------+----+-----+\r\n                          |\r\n                          v\r\n                    +----------+----------------+\r\n                    | function | cb_            |\r\n                    +----------+----------------+  \r\n                    | cb = function(data){      |\r\n                    |   return data.length      |\r\n                    | }                         |\r\n               +--- + readFileAction.action(    |\r\n               |    |   function(data){         |\r\n               |    |     cb_(cb(data))         |\r\n               |    |   });                     | \r\n               |    +---------------------------+\r\n               |           \r\n               v          \r\n    +----------------+----------+\r\n    | readFileAction | .action  | \r\n    +----------------+----+-----+\r\n                          |\r\n                          v\r\n                    +----------+---------------+\r\n                    | function | cb            |\r\n                    +----------+---------------+   \r\n                    | readFile(\"data.txt\", cb) |\r\n                    +--------------------------+\r\n\r\n`ActionOne` and `ActionTwo` are `Action`s first and second `_next` returned respectively, Now if we give `ActionTwo` a `callback` with `_go`, the whole callback chain will be fired sequential.\r\n\r\nNice, we just use a simple class with only one field, two very simple functions, the callbacks are now written in a much more readable way, but we have a key problem to be solved yet: what if we want to nest async `Action`s inside an `Action`, it turn out with an adjusted `_next` function, we can handle that:\r\n\r\n```js\r\nAction.prototype._next = function(cb) {\r\n    var self = this;\r\n    return new Action(function(_cb) {\r\n        return self.action(function(data) {\r\n            var _data = cb(data);\r\n            if (_data instanceof Action) {\r\n                return _data._go(_cb);\r\n            } else {\r\n                return _cb(_data);\r\n            }\r\n        });\r\n    });\r\n};\r\n```\r\n\r\nWe use `instanceof Action` to check if a callback returns a `Action` or not, if an `Action` is returned, we fire it with callbacks in future:\r\n\r\n```js\r\nreadFileAction\r\n._next(function(data){\r\n    var newFile = parse(data);\r\n    return new Action(function(cb){\r\n        readFile(newFile, cb);\r\n    });\r\n})\r\n._go(function(data){\r\n    // data here is the newFile's content\r\n    console.log(data)\r\n})\r\n```\r\n\r\nNow we can say we have solved the callback hell problem! Well, actually just 50% of it.\r\nBefore we proceed another 50%, one important thing to keep in mind: **an `Action` is not a `Promise`, it will not happen if you don't fire it with `_go`, and it can be fired multiple times, it's just a reference to a wrapped function**:\r\n\r\n```js\r\nreadFileAction\r\n._next(processOne)\r\n._go(console.log)\r\n\r\n// after we do other things, or inside another request handler\r\n...\r\n\r\n// processTwo may receive different data since the file may change!\r\nreadFileAction\r\n._next(processTwo)\r\n._go(console.log)\r\n```\r\n\r\nI'll present `Action.freeze` in [Difference from Promise](https://github.com/winterland1989/Action.js/wiki/Difference-from-Promise) to give you Promise behavior when you need it, now let's attack another 50% of the callback hell issue.\r\n\r\nError handling\r\n--------------\r\n\r\nOne biggest issue with `Promise` is that error handleing is somewhat magic and complex:\r\n\r\n+ It will eat your error sliently if you don't supply a `catch` at the end of the chain.\r\n\r\n+ You have to use two different functions, `resolve` to pass value to the callbacks and `reject` to skip them, what will happen if you `throw` an `Error`, well, just the same as `reject`\r\n\r\nWhat we can do to make it simpler? It's a complex problem, so we start solving it by simplify it: **We use `Error` type as a special type to pass error information to the downstream**, what does this mean?\r\n\r\n```js\r\nAction.prototype.next = function(cb) {\r\n    var self = this;\r\n    return new Action(function(_cb) {\r\n        return self.action(function(data) {\r\n            if (data instanceof Error) {\r\n                return _cb(data);\r\n            } else {\r\n                var _data = cb(data);\r\n                if (_data instanceof Action) {\r\n                    return _data._go(_cb);\r\n                } else {\r\n                    return _cb(_data);\r\n                }\r\n            }\r\n        });\r\n    });\r\n};\r\n```\r\n\r\nHere, let me present the final version of our `next` function, comparing to `_next` we write before, can you see what's the different? It still reture a new `Action`, when it fired, the original action are called, and we checked if the data are `instanceof Error`, if it's not, everything as usual, we feed it to `cb` that `next` received, but if it's an `Error`, we pass it to a future `_cb`, which we don't have now.\r\n\r\nSymmetrically, we have to define a function that special deal with `Errors`, and let normal values pass:\r\n\r\n```js\r\nAction.prototype.guard = function(cb) {\r\n    var self = this;\r\n    return new Action(function(_cb) {\r\n        return self.action(function(data) {\r\n           if (data instanceof Error) {\r\n            var _data = cb(data);\r\n                if (_data instanceof Action) {\r\n                    return _data._go(_cb);\r\n                } else {\r\n                    return _cb(_data);\r\n                }\r\n            } else {\r\n                return _cb(data);\r\n            }\r\n        });\r\n    });\r\n};\r\n```\r\n\r\nThis time, we know the `cb` that `guard` received are prepared for `Error` values, so we flip the logic, since it's just a flipped version of `next`, you can return an `Action` if your need some async code to deal with the `Error`.\r\n\r\nFollowing code demonstrate how to use our `next` and `guard`:\r\n\r\n```js\r\nnew Action(function(cb){\r\n    readFile('fileA', function(err, data){\r\n        if (err){\r\n            // see how to pass an Error to downstream, not reject, not throw, just return\r\n            cb(err);\r\n        }else{\r\n\r\n            cb(data);\r\n        }\r\n    });\r\n})\r\n.next(function(data){\r\n    return processData(data);\r\n})\r\n.next(function(data){\r\n    return new Action(function(cb){\r\n        processDataAsync(data, cb);\r\n    })\r\n})\r\n.next(\r\n    try{\r\n        return someProcessMayWentWrong(data);\r\n    }catch(e){\r\n        // same as above, we return the error\r\n        return e;\r\n    }\r\n}))\r\n.next(function(data){\r\n    // This process will be skip if previous step pass an Error\r\n    return anotherProcess(data);\r\n})\r\n.guard(function(e){\r\n    // This process will be skip if there's no Errors\r\n    return processError(e);\r\n});\r\n._go(console.log);\r\n\r\n```\r\n\r\nThe final result will be produced by `anotherProcess` if `someProcessMayWentWrong` didn't go wrong, or produced by `processError` otherwise.\r\n\r\nYou can place `guard` in the middle of the chain, all `Errors` before it will be handled by it, and the value it produced, will be passed to the rest of the chain.\r\n\r\nSo, what if the use didn't supply a `guard`? Well, since use have to supply a callback to the `_go`, they can check if the callback they supplied received an `Error` or not like this:\r\n\r\n```js\r\napiReturnAction('...')._go(function(data){\r\n    if (data instanceof Error){\r\n        //handle error here\r\n        ...\r\n    } else {\r\n        // process data here\r\n        ...\r\n    }\r\n});\r\n\r\n```\r\nYeah, it does work(and sometimes very useful), but we don't want to force our user to write like above, and we should throw `Error` in case user didn't `guard` them, so here let me present the final version of `go`:\r\n\r\n```js\r\nAction.prototype.go = function(cb) {\r\n    return this.action(function(data) {\r\n        if (data instanceof Error) {\r\n            throw data;\r\n        } else if (cb != null) {\r\n            return cb(data);\r\n        }\r\n    });\r\n};\r\n\r\n```\r\n\r\nNow user can omit the callback, and if user don't guard `Error`s, we will yell at them when `Error` occurs!\r\n\r\n```js\r\nnew Action(function(cb){\r\n    readFile('fileA', function(err, data){\r\n        if (err){\r\n            // suppose we got an Error here\r\n            cb(err);\r\n        }else{\r\n\r\n            cb(data);\r\n        }\r\n    });\r\n})\r\n.go() // The Error will be throw!\r\n\r\n```\r\n\r\nFinally, to ease error management, and to attack the [v8 optimization problems](https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#2-unsupported-syntax). We recommand use `Action.safe`:\r\n\r\n```js\r\n// this small function minimize v8 try-catch overhead\r\n// and make attaching custom Error easy\r\nAction.safe = function(err, fn) {\r\n    return function(data) {\r\n        try {\r\n            return fn(data);\r\n        } catch (_error) {\r\n            return err;\r\n        }\r\n    };\r\n};\r\n```\r\n\r\nAnd use `safe` wrap your `someProcessMayWentWrong` like this:\r\n\r\n```js\r\nvar safe = Action.safe;\r\nnew Action(function(cb){\r\n    readFile('fileA', function(err, data){\r\n        if (err){\r\n            // see how to pass an Error to downstream, not reject, not throw, just return\r\n            cb(err);\r\n        }else{\r\n            cb(data);\r\n        }\r\n    });\r\n})\r\n.next(\r\n    safe( new Error(\"PROCESS_ERROR_XXX: process xxx failed when xxx\")\r\n        , someProcessMayWentWrong)\r\n)\r\n.next(...)\r\n.next(...)\r\n.guard(function(e){\r\n    if (e.message.indexOf('ENOENT') === 0){\r\n        ...\r\n    }\r\n    if (e.message.indexOf('PROCESS_ERROR_XXX') === 0 ){\r\n        ...\r\n    }\r\n})\r\n.go()\r\n\r\n```\r\n\r\nThat's all core functions of `Action` is going to give you, hope you enjoy my solution :), Check [API doc](https://github.com/winterland1989/Action.js/wiki/API-document) for more interesting things like `Action.parallel`, `Action.race`, `Action.sequence` and `Action.retry`, It's also highly recommend to read [Difference from Promise](https://github.com/winterland1989/Action.js/wiki/Difference-from-Promise) to get a deeper understanding.\r\n\r\nFAQ\r\n===\r\n\r\nWhy you claim `Action` are faster than `Promise`?\r\n-------------------------------------------------\r\n\r\nBecause it simply do less work:\r\n\r\n+ It doesn't maintain a internal state\r\n+ It just have a single field\r\n+ It just add a redirect call to original callback, and some type checking\r\n\r\nI even be amazed it can achieve so much functionality with such short code myself, see [Benchmark](https://github.com/winterland1989/Action.js/wiki/Benchmark) youself.\r\n\r\nWhy following code doesn't work?\r\n--------------------------------\r\n\r\n```js\r\nvar fileA = readFileAction\r\n.go(processOne)\r\n\r\nfileA\r\n.next(processTwo)\r\n.go()\r\n```\r\n\r\nWell, read [Difference from Promise](https://github.com/winterland1989/Action.js/wiki/Difference-from-Promise) to get a detailed answer, tl,dr... here is the short answer:\r\n\r\n```js\r\n// readFile now and return a Action, this function won't block\r\nvar fileA = Action.freeze(readFileAction.next(processOne))\r\n\r\n// now fileA will always have the same content and file will never be read again.\r\nfileA\r\n.next(processTwo)\r\n.go()\r\n\r\n// processTwo will receive the same content\r\nfileA\r\n.next(processTwo)\r\n.go()\r\n```\r\n\r\nIf you want have a Promise behavior(fire and memorize), use `Action.freeze`, `go` won't return a new `Action`.\r\n\r\nWhen to use this library?\r\n-------------------------\r\n\r\nWith `Promise` added to ES6 and ES7 `async/await` proposal, you muse ask, why another library to the same trick again?, well, i can add generator support myself with something like `Action.async`, but i guess `Action` will never be part of the language, so i didn't, and i can see future will be full of `async` functions all over the place, so use this library if you:\r\n\r\n+ Have a FP background(can't you see all i have done is porting the `Cont` monad from Haskell?)\r\n+ Want raw speed, `Action.js` guarantee speed close to handroll callbacks, just much cleaner.\r\n+ Want different sementics, with `Promise`, you just can't reuse your callback chain, we have to create a new `Promise`, with `Action`, just `go` again. \r\n\r\nConsider following code:\r\n\r\n```js\r\nAction.retry = function(times, action) {\r\n    var a;\r\n    return a = action.guard(function(e) {\r\n        if (times-- !== 0) {\r\n            return a;\r\n        } else {\r\n            return new Error('RETRY_ERROR: Retry limit reached');\r\n        }\r\n    });\r\n};\r\n```\r\n\r\n`Action.js` let you do [monadic recursion](https://www.haskell.org/haskellwiki/Recursion_in_a_monad), while `Promise` can't.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}